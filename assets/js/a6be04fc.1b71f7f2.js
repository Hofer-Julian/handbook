"use strict";(self.webpackChunkhandbook=self.webpackChunkhandbook||[]).push([[892],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,b=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?i.createElement(b,o(o({ref:t},p),{},{components:n})):i.createElement(b,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},364:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=n(7462),r=(n(7294),n(4137));const a={id:"blob-http",title:"Blob HTTP service"},o=void 0,l={unversionedId:"specification/APIs/blob-http",id:"specification/APIs/blob-http",title:"Blob HTTP service",description:"This document describes how blobs are materialized to the filesystem and served from a node over HTTP endpoints.",source:"@site/docs/specification/APIs/blob-http.md",sourceDirName:"specification/APIs",slug:"/specification/APIs/blob-http",permalink:"/specification/APIs/blob-http",draft:!1,tags:[],version:"current",frontMatter:{id:"blob-http",title:"Blob HTTP service"},sidebar:"specification",previous:{title:"Queries",permalink:"/specification/APIs/queries"},next:{title:"Clients and nodes",permalink:"/specification/networking/clients-nodes"}},s={},c=[{value:"Materialization",id:"materialization",level:2},{value:"Serving over HTTP",id:"serving-over-http",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This document describes how ",(0,r.kt)("inlineCode",{parentName:"p"},"blobs")," are materialized to the filesystem and served from a node over HTTP endpoints."),(0,r.kt)("h2",{id:"materialization"},"Materialization"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When a ",(0,r.kt)("inlineCode",{parentName:"li"},"blob_v1")," document and all it's ",(0,r.kt)("inlineCode",{parentName:"li"},"blob_piece_v1")," pieces are present on a node it can be materialized and served to client applications over a ",(0,r.kt)("inlineCode",{parentName:"li"},"http")," endpoint"),(0,r.kt)("li",{parentName:"ul"},"Unlike other documents which are materialized into tables in a database, blobs are materialized directly on the filesystem"),(0,r.kt)("li",{parentName:"ul"},"Even if all pieces are present, a blob is only materialized when it is referenced in a relation field by another document"),(0,r.kt)("li",{parentName:"ul"},"As these relations can be either ",(0,r.kt)("em",{parentName:"li"},"pinned")," or ",(0,r.kt)("em",{parentName:"li"},"unpinned")," we support materializing a blob by both it's document id and document view id",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"When a blob is referenced in a ",(0,r.kt)("inlineCode",{parentName:"li"},"relation")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"relation_list")," field then it should be materialized to it's latest view"),(0,r.kt)("li",{parentName:"ul"},"When a blob is referenced in a ",(0,r.kt)("inlineCode",{parentName:"li"},"pinned_relation")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"pinned_relation_list")," field it should be materialized to the requested view id"),(0,r.kt)("li",{parentName:"ul"},"Once the correct view id has been established, a blob should be materialized by collecting all it's ",(0,r.kt)("inlineCode",{parentName:"li"},"blob_piece_v1")," documents, concatenating them, and storing them on the filesystem at the following path: ",(0,r.kt)("inlineCode",{parentName:"li"},"/blob/<DOCUMENT_ID>/<DOCUMENT_VIEW_ID>"))))),(0,r.kt)("h2",{id:"serving-over-http"},"Serving over HTTP"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A static file HTTP server should watch the blob directory and serve all files via an HTTP endpoint like so: ",(0,r.kt)("inlineCode",{parentName:"li"},"https://myaquadoggo.net/blob/<DOCUMENT_ID>/<DOCUMENT_VIEW_ID>")),(0,r.kt)("li",{parentName:"ul"},"Additionally, in order to support serving documents by their document id, the HTTP service should forward requests arriving at ",(0,r.kt)("inlineCode",{parentName:"li"},"https://myaquadoggo.net/blob/<DOCUMENT_ID>")," to the location of the documents latest materialized view")))}d.isMDXComponent=!0}}]);