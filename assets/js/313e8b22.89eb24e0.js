"use strict";(self.webpackChunkhandbook=self.webpackChunkhandbook||[]).push([[8251],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7853:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(4137));const a={id:"overview",title:"Overview"},o=void 0,l={unversionedId:"specification/APIs/overview",id:"specification/APIs/overview",title:"Overview",description:"- Clients send queries to nodes in order to publish new entries and query materialised documents",source:"@site/docs/specification/APIs/overview.md",sourceDirName:"specification/APIs",slug:"/specification/APIs/overview",permalink:"/specification/APIs/overview",draft:!1,tags:[],version:"current",frontMatter:{id:"overview",title:"Overview"},sidebar:"specification",previous:{title:"Encryption",permalink:"/specification/encryption"},next:{title:"Publishing",permalink:"/specification/APIs/publishing"}},s={},c=[{value:"Client API (publishing &amp; queries)",id:"client-api-publishing--queries",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Clients send ",(0,i.kt)("em",{parentName:"li"},"queries")," to nodes in order to publish new entries and query materialised documents"),(0,i.kt)("li",{parentName:"ul"},"Queries are sent via HTTP using the ",(0,i.kt)("a",{parentName:"li",href:"https://graphql.org/"},"GraphQL")," language"),(0,i.kt)("li",{parentName:"ul"},"Serving a GraphQL API and handling requests is implemented in ",(0,i.kt)("a",{parentName:"li",href:"/specification/networking/clients-nodes"},"nodes"),", for example ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/p2panda/aquadoggo"},"Aquadoggo")),(0,i.kt)("li",{parentName:"ul"},"Large numbers are encoded as strings in the payloads (",(0,i.kt)("inlineCode",{parentName:"li"},"logId")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"seqNum"),") to account for the lack of support to represent u64 integers in JSON")),(0,i.kt)("h2",{id:"client-api-publishing--queries"},"Client API (publishing & queries)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The client api is the interface for communication between ",(0,i.kt)("a",{parentName:"li",href:"/specification/networking/clients-nodes"},"node and client")),(0,i.kt)("li",{parentName:"ul"},"Clients can publish entries",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Before that, clients can retrieve parameters required for encoding entries if they can't compute them independently"))),(0,i.kt)("li",{parentName:"ul"},"Clients can retrieve materialised ",(0,i.kt)("a",{parentName:"li",href:"/specification/data-types/documents"},"documents")," of a given schema",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Documents can be filtered by individual fields"),(0,i.kt)("li",{parentName:"ul"},"Linked documents can be retrieved"),(0,i.kt)("li",{parentName:"ul"},"Documents can be sorted by arbitrary fields"),(0,i.kt)("li",{parentName:"ul"},"Documents can be sorted by self-referential orderings"),(0,i.kt)("li",{parentName:"ul"},"Documents can be queried by ",(0,i.kt)("inlineCode",{parentName:"li"},"document_view_id")," in order to receive a ","[documents][view]"," onto its data at a specific materialised state")))))}u.isMDXComponent=!0}}]);