"use strict";(self.webpackChunkhandbook=self.webpackChunkhandbook||[]).push([[8251],{1145:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var s=i(5893),t=i(1151);const r={id:"overview",title:"Overview"},c=void 0,o={id:"specification/APIs/overview",title:"Overview",description:"- Clients send queries to nodes in order to publish new entries and query materialised documents",source:"@site/docs/specification/APIs/overview.md",sourceDirName:"specification/APIs",slug:"/specification/APIs/overview",permalink:"/specification/APIs/overview",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"overview",title:"Overview"},sidebar:"specification",previous:{title:"Encryption",permalink:"/specification/encryption"},next:{title:"Publishing",permalink:"/specification/APIs/publishing"}},a={},l=[{value:"Client API (publishing &amp; queries)",id:"client-api-publishing--queries",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Clients send ",(0,s.jsx)(n.em,{children:"queries"})," to nodes in order to publish new entries and query materialised documents"]}),"\n",(0,s.jsxs)(n.li,{children:["Queries are sent via HTTP using the ",(0,s.jsx)(n.a,{href:"https://graphql.org/",children:"GraphQL"})," language"]}),"\n",(0,s.jsxs)(n.li,{children:["Serving a GraphQL API and handling requests is implemented in ",(0,s.jsx)(n.a,{href:"/specification/networking/clients-nodes",children:"nodes"}),", for example ",(0,s.jsx)(n.a,{href:"https://github.com/p2panda/aquadoggo",children:"Aquadoggo"})]}),"\n",(0,s.jsxs)(n.li,{children:["Large numbers are encoded as strings in the payloads (",(0,s.jsx)(n.code,{children:"logId"})," and ",(0,s.jsx)(n.code,{children:"seqNum"}),") to account for the lack of support to represent u64 integers in JSON"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"client-api-publishing--queries",children:"Client API (publishing & queries)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The client api is the interface for communication between ",(0,s.jsx)(n.a,{href:"/specification/networking/clients-nodes",children:"node and client"})]}),"\n",(0,s.jsxs)(n.li,{children:["Clients can publish entries","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Before that, clients can retrieve parameters required for encoding entries if they can't compute them independently"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Clients can retrieve materialised ",(0,s.jsx)(n.a,{href:"/specification/data-types/documents",children:"documents"})," of a given schema","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Documents can be filtered by individual fields"}),"\n",(0,s.jsx)(n.li,{children:"Linked documents can be retrieved"}),"\n",(0,s.jsx)(n.li,{children:"Documents can be sorted by arbitrary fields"}),"\n",(0,s.jsx)(n.li,{children:"Documents can be sorted by self-referential orderings"}),"\n",(0,s.jsxs)(n.li,{children:["Documents can be queried by ",(0,s.jsx)(n.code,{children:"document_view_id"})," in order to receive a [documents][view] onto its data at a specific materialised state"]}),"\n"]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>c});var s=i(7294);const t={},r=s.createContext(t);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);