"use strict";(self.webpackChunkhandbook=self.webpackChunkhandbook||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"about":[{"type":"link","label":"Introduction","href":"/about/","docId":"about/index"},{"type":"link","label":"Things we\'re interested in","href":"/about/things-were-interested-in","docId":"about/things-were-interested-in"},{"type":"link","label":"Roadmap","href":"/about/roadmap","docId":"about/roadmap"},{"type":"link","label":"How to contribute","href":"/about/contribute","docId":"about/contribute"},{"type":"link","label":"History","href":"/about/history","docId":"about/history"}],"learn":[{"type":"link","label":"Overview","href":"/learn/","docId":"learn/index"},{"type":"link","label":"Bamboo Entries","href":"/learn/entries","docId":"learn/entries"},{"type":"link","label":"Operations and Documents","href":"/learn/operations","docId":"learn/operations"},{"type":"link","label":"Networks","href":"/learn/networks","docId":"learn/networks"}],"specification":[{"type":"link","label":"Introduction","href":"/specification/","docId":"specification/index"},{"type":"link","label":"Key Concepts","href":"/specification/key-concepts","docId":"specification/key-concepts"},{"type":"category","label":"Core data types","items":[{"type":"link","label":"Bamboo","href":"/specification/data-types/bamboo","docId":"specification/data-types/bamboo"},{"type":"link","label":"Key Pairs","href":"/specification/data-types/key-pairs","docId":"specification/data-types/key-pairs"},{"type":"link","label":"Operations","href":"/specification/data-types/operations","docId":"specification/data-types/operations"},{"type":"link","label":"Schemas","href":"/specification/data-types/schemas","docId":"specification/data-types/schemas"},{"type":"link","label":"Documents","href":"/specification/data-types/documents","docId":"specification/data-types/documents"},{"type":"link","label":"Document views","href":"/specification/data-types/document-views","docId":"specification/data-types/document-views"},{"type":"link","label":"Blobs","href":"/specification/data-types/blobs","docId":"specification/data-types/blobs"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Authorisation","href":"/specification/authorisation","docId":"specification/authorisation"},{"type":"link","label":"Encryption","href":"/specification/encryption","docId":"specification/encryption"},{"type":"category","label":"APIs","items":[{"type":"link","label":"Overview","href":"/specification/APIs/overview","docId":"specification/APIs/overview"},{"type":"link","label":"Publishing","href":"/specification/APIs/publishing","docId":"specification/APIs/publishing"},{"type":"link","label":"Queries","href":"/specification/APIs/queries","docId":"specification/APIs/queries"},{"type":"link","label":"Blob HTTP service","href":"/specification/APIs/blob-http","docId":"specification/APIs/blob-http"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Networking","items":[{"type":"link","label":"Clients and nodes","href":"/specification/networking/clients-nodes","docId":"specification/networking/clients-nodes"},{"type":"link","label":"Networking","href":"/specification/networking/","docId":"specification/networking/networking"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Replication","href":"/specification/replication","docId":"specification/replication"},{"type":"link","label":"Canonic Encoding","href":"/specification/encoding-data","docId":"specification/encoding-data"},{"type":"link","label":"Glossary","href":"/specification/glossary","docId":"specification/glossary"}]},"docs":{"about/contribute":{"id":"about/contribute","title":"How to contribute","description":"- Please read our Code of Conduct","sidebar":"about"},"about/history":{"id":"about/history","title":"History","description":"p2panda emerged out of activities around the self-curated zine BLATT 3000 (2014) and subsequent festivals VERANTWORTUNG 3000 (2016) and HOFFNUNG 3000 (2017), the latter of these being the catalyst for building a custom platform designed to help communities organise in a decentralised manner, also called HOFFNUNG 3000.","sidebar":"about"},"about/implementations":{"id":"about/implementations","title":"Implementations","description":"- we have built p2panda-rs, a Rust implementation of the p2panda specification"},"about/index":{"id":"about/index","title":"Introduction","description":"Local first","sidebar":"about"},"about/roadmap":{"id":"about/roadmap","title":"Roadmap","description":"Previous","sidebar":"about"},"about/specification":{"id":"about/specification","title":"Specification","description":"- the p2panda specification describes the protocol and the interfaces required to be implemented"},"about/things-were-interested-in":{"id":"about/things-were-interested-in","title":"Things we\'re interested in","description":"Lightweight clients that can easily be implemented as websites","sidebar":"about"},"faq":{"id":"faq","title":"FAQ","description":"Can I use p2panda already?"},"learn/entries":{"id":"learn/entries","title":"Bamboo Entries","description":"Trust is funny","sidebar":"learn"},"learn/index":{"id":"learn/index","title":"Overview","description":"In this Learn section we want to introduce you to the concepts around p2panda. It will not be as formal as the Specification but also more theoretical than the Tutorials. With all of the other resources together you should get a good overview of what p2panda is about.","sidebar":"learn"},"learn/networks":{"id":"learn/networks","title":"Networks","description":"In p2panda we need at least two participants to call it a party: We need a Client and a Node. Okay, they don\u2019t sound like the most fun party guests, but we promise you, they are cool!","sidebar":"learn"},"learn/operations":{"id":"learn/operations","title":"Operations and Documents","description":"Most of the time, whenever we do something, we usually do it in multiple steps. For example when we cook a good curry for our friends.","sidebar":"learn"},"libraries/index":{"id":"libraries/index","title":"Libraries","description":"p2panda"},"links":{"id":"links","title":"Links","description":"<Links links={["},"specification/APIs/blob-http":{"id":"specification/APIs/blob-http","title":"Blob HTTP service","description":"This document describes how blobs are materialized to the filesystem and served from a node over HTTP endpoints.","sidebar":"specification"},"specification/APIs/overview":{"id":"specification/APIs/overview","title":"Overview","description":"- Clients send queries to nodes in order to publish new entries and query materialised documents","sidebar":"specification"},"specification/APIs/publishing":{"id":"specification/APIs/publishing","title":"Publishing","description":"- Clients use two GraphQL operations for publishing entries:","sidebar":"specification"},"specification/APIs/queries":{"id":"specification/APIs/queries","title":"Queries","description":"- The GraphQL schema of a node changes depending on the schemas that are available on the node.","sidebar":"specification"},"specification/authorisation":{"id":"specification/authorisation","title":"Authorisation","description":"While this section is almost fully complete and even implemented, it might be a little rough at the edges: We\'re still working on a fun to use high-level API!","sidebar":"specification"},"specification/data-types/bamboo":{"id":"specification/data-types/bamboo","title":"Bamboo","description":"Requirements in this section refer only to how p2panda specifies use of bamboo.","sidebar":"specification"},"specification/data-types/blobs":{"id":"specification/data-types/blobs","title":"Blobs","description":"The blob specification describes system schemas and validation conditions used when publishing binary application data. Blobs require their own materialization logic and these system schemas allow a node to distinguish blob documents from other application data and behave accordingly. Conceptually, blobs can be considered to be \\"attachments\\" on other documents. It is not intended that blobs alone serve as a general purpose content delivery system. We expect blobs to be attached to other documents via relation fields, replication and materialization logic can be optimized based on this assumption. See the blob http specification to read how blobs are materialized and served on a node.","sidebar":"specification"},"specification/data-types/document-views":{"id":"specification/data-types/document-views","title":"Document views","description":"- Document views represent the immutable state of a document at a particular point in its history of edits","sidebar":"specification"},"specification/data-types/documents":{"id":"specification/data-types/documents","title":"Documents","description":"- A Document is a high-level mutable, multi-writer data type constructed from a linked graph of operations.","sidebar":"specification"},"specification/data-types/key-pairs":{"id":"specification/data-types/key-pairs","title":"Key Pairs","description":"Clients MUST use Ed25519 as the Digital Signature Algorithm for Bamboo.","sidebar":"specification"},"specification/data-types/operations":{"id":"specification/data-types/operations","title":"Operations","description":"- Operations represent atomic data changes.","sidebar":"specification"},"specification/data-types/schemas":{"id":"specification/data-types/schemas","title":"Schemas","description":"- Schemas are used to describe and validate the format in which data is published","sidebar":"specification"},"specification/documents-and-schema":{"id":"specification/documents-and-schema","title":"Documents & Schema","description":"Documents"},"specification/encoding-data":{"id":"specification/encoding-data","title":"Canonic Encoding","description":"p2panda requires a canonical encoding format to guarantee that hashing a value produces the same result across all implementations.","sidebar":"specification"},"specification/encryption":{"id":"specification/encryption","title":"Encryption","description":"While this section is almost fully complete and even implemented, it might be a little rough at the edges: We\'re still working on a fun to use high-level API!","sidebar":"specification"},"specification/glossary":{"id":"specification/glossary","title":"Glossary","description":"Private Key*: The private key in a key pair, used for signing data.","sidebar":"specification"},"specification/index":{"id":"specification/index","title":"Introduction","description":"p2panda is a peer-to-peer protocol and event-driven data store for secure, energy-efficient local-first applications. It can be used in both fully distributed and federated network topologies, offers encryption (via MLS), multi-writer editing, permissions and data schemas.","sidebar":"specification"},"specification/key-concepts":{"id":"specification/key-concepts","title":"Key Concepts","description":"This is a short introduction into some of the higher level concepts which build on top of the core p2panda data types. You can dive deeper into any of these topics by visiting the relevant specification pages. Hopefully this gives you an introductory overview which will help contextualise the details later.","sidebar":"specification"},"specification/networking/clients-nodes":{"id":"specification/networking/clients-nodes","title":"Clients and nodes","description":"- p2panda has a clear separation of clients and nodes to allow flexible setups and make client development easier","sidebar":"specification"},"specification/networking/networking":{"id":"specification/networking/networking","title":"Networking","description":"Introduction","sidebar":"specification"},"specification/replication":{"id":"specification/replication","title":"Replication","description":"Introduction","sidebar":"specification"},"tutorials/aquadoggo":{"id":"tutorials/aquadoggo","title":"Tutorial: Set up a local node","description":"This tutorial walks you through setting up a locally running p2panda node on your computer and shows you how you can configure it and interact with it via the GraphQL playground."},"tutorials/index":{"id":"tutorials/index","title":"Tutorials","description":"Start and maintain a local aquadoggo node on your machine. Go to tutorial"},"tutorials/mushroom-app":{"id":"tutorials/mushroom-app","title":"Tutorial: Let\'s build a mushroom app!","description":"In this tutorial we will build an web app for finding and identifying mushrooms using p2panda. We will build the application with React, Webpack and TypeScript."},"tutorials/send-to-node":{"id":"tutorials/send-to-node","title":"Tutorial: Create a schema","description":"In this tutorial we want to register a new schema on a p2panda node and create our first document with it! We will use the send-to-node command line tool and aquadoggo node for this."}}}')}}]);