"use strict";(self.webpackChunkhandbook=self.webpackChunkhandbook||[]).push([[9595],{8034:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var t=o(5893),i=o(1151);const a={title:"Tutorial: Set up a local node"},r=void 0,s={id:"tutorials/aquadoggo",title:"Tutorial: Set up a local node",description:"This tutorial walks you through setting up a locally running p2panda node on your computer and shows you how you can configure it and interact with it via the GraphQL playground.",source:"@site/docs/tutorials/aquadoggo.md",sourceDirName:"tutorials",slug:"/tutorials/aquadoggo",permalink:"/tutorials/aquadoggo",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Tutorial: Set up a local node"}},d={},l=[{value:"What do I need?",id:"what-do-i-need",level:2},{value:"Download <code>aquadoggo</code>",id:"download-aquadoggo",level:2},{value:"Start the node",id:"start-the-node",level:2},{value:"See more logs",id:"see-more-logs",level:3},{value:"GraphQL playground",id:"graphql-playground",level:2},{value:"Send a query",id:"send-a-query",level:3},{value:"Documentation",id:"documentation",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Data directory",id:"data-directory",level:3},{value:"Delete database",id:"delete-database",level:3},{value:"HTTP port",id:"http-port",level:3},{value:"PostgreSQL or SQLite",id:"postgresql-or-sqlite",level:3},{value:"Supported Schema IDs",id:"supported-schema-ids",level:3},{value:"Done!",id:"done",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components},{Details:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"This tutorial walks you through setting up a locally running p2panda node on your computer and shows you how you can configure it and interact with it via the GraphQL playground."}),"\n",(0,t.jsx)(n.p,{children:"It's good to know how to run your own node if you want to start developing p2panda clients. You can try out new schemas and applications with them or just experiment!"}),"\n",(0,t.jsxs)(n.p,{children:["We will use the reference node implementation ",(0,t.jsx)(n.a,{href:"https://github.com/p2panda/aquadoggo",children:(0,t.jsx)(n.code,{children:"aquadoggo"})})," for this, which is a command line application written in Rust."]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.mdxAdmonitionTitle,{children:["What is a ",(0,t.jsx)(n.em,{children:"node"}),"?"]}),(0,t.jsx)(n.p,{children:"Nodes are the actual participants in an p2panda network: They validate and store data coming from clients and make sure to send it to other nodes."}),(0,t.jsxs)(n.p,{children:["Nodes are usually agnostic to the applications using them, this means that one node could potentially support hundreds of different p2panda applications. Having one node running on your computer is therefore already enough! You can read more about nodes in the regarding ",(0,t.jsx)(n.a,{href:"/learn/networks",children:"Learn"})," section."]})]}),"\n",(0,t.jsx)(n.h2,{id:"what-do-i-need",children:"What do I need?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Rust"}),"\n",(0,t.jsx)(n.li,{children:"Terminal"}),"\n",(0,t.jsx)(n.li,{children:"Browser"}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"Never worked with Rust before?",type:"info",children:(0,t.jsxs)(n.p,{children:["This tutorial requires you to have a working Rust environment. If you have never worked with Rust before this is no problem! Setting it up is fairly easy and besides using some basic command line commands there is no more Rust knowledge required to make ",(0,t.jsx)(n.code,{children:"aquadoggo"})," run on your computer."]})}),"\n",(0,t.jsxs)(o,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)("summary",{children:"How do I install Rust?"}),"\nMake sure you have a working Rust environment installed on your computer before you begin with the tutorial. You can check this by running ",(0,t.jsx)(n.code,{children:"rustc --version"})," in your terminal. This tutorial was written with Rust version ",(0,t.jsx)(n.code,{children:"1.70.0"})," but it will probably also work with other versions."]}),(0,t.jsxs)(n.p,{children:["If you don't have Rust installed yet you can follow the steps on the official Rust website: ",(0,t.jsx)(n.a,{href:"https://www.rust-lang.org/tools/install",children:"How to install Rust"}),"."]})]}),"\n",(0,t.jsxs)(n.h2,{id:"download-aquadoggo",children:["Download ",(0,t.jsx)(n.code,{children:"aquadoggo"})]}),"\n",(0,t.jsxs)(n.p,{children:["Let's download ",(0,t.jsx)(n.code,{children:"aquadoggo"}),"! For this we first download the whole git repository with the source code inside:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Download git repository\ngit clone https://github.com/p2panda/aquadoggo.git\n\n# Enter the folder you've just created\ncd aquadoggo\n"})}),"\n",(0,t.jsx)(n.h2,{id:"start-the-node",children:"Start the node"}),"\n",(0,t.jsx)(n.p,{children:"To run the node now you only have to run this command inside the project's folder:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cargo run\n"})}),"\n",(0,t.jsx)(n.p,{children:"This will automatically download all required Rust dependencies, compile the application and finally start it. Probably you will see a lot of logs now around what the Rust compiler is doing. Depending on your computer and network connection this might take a couple of minutes. The good thing though is, that you only have to do this once, the next time you run the command, it will start the program directly."}),"\n",(0,t.jsx)(n.p,{children:"When the compilation finished and the program started you will see .. almost nothing!"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"    Finished dev [unoptimized + debuginfo] target(s) in 0.10s\n     Running `target/debug/aquadoggo`\n"})}),"\n",(0,t.jsx)(n.p,{children:"This is because by default the program will not spit out any information except when you explicitly asked about it."}),"\n",(0,t.jsx)(n.p,{children:"The node is already running, you are done!"}),"\n",(0,t.jsx)(n.h3,{id:"see-more-logs",children:"See more logs"}),"\n",(0,t.jsxs)(n.p,{children:["We can quit the node by pressing ",(0,t.jsx)(n.code,{children:"CTRL"})," + ",(0,t.jsx)(n.code,{children:"C"})," in the regarding terminal. Let's start it again, but this time with more logging enabled:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"RUST_LOG=aquadoggo=info cargo run\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This will enable logs coming directly from ",(0,t.jsx)(n.code,{children:"aquadoggo"})," and only the most important ones, like basic system informations, warnings and errors. We are enabling logging with the environment variable ",(0,t.jsx)(n.code,{children:"RUST_LOG"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Ah, this looks more interesting now:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"    Finished dev [unoptimized + debuginfo] target(s) in 0.10s\n     Running `target/debug/aquadoggo`\n[2023-08-07T12:52:59Z INFO  aquadoggo::manager] Start materializer service\n[2023-08-07T12:52:59Z INFO  aquadoggo::materializer::worker] Register reduce worker with pool size 16\n[2023-08-07T12:52:59Z INFO  aquadoggo::materializer::worker] Register dependency worker with pool size 16\n[2023-08-07T12:52:59Z INFO  aquadoggo::materializer::worker] Register schema worker with pool size 16\n[2023-08-07T12:52:59Z INFO  aquadoggo::manager] Start http service\n[2023-08-07T12:52:59Z INFO  aquadoggo::manager] Start network service\n[2023-08-07T12:52:59Z INFO  aquadoggo::network::service] Local peer id: <NODE_PEER_ID>\n[2023-08-07T12:52:59Z INFO  aquadoggo::manager] Start replication service\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you want to see even more you can change the log verbosity from ",(0,t.jsx)(n.code,{children:"info"})," to ",(0,t.jsx)(n.code,{children:"debug"})," or even ",(0,t.jsx)(n.code,{children:"trace"}),", but then you will see a whole flood of information you might not always need."]}),"\n",(0,t.jsx)(n.admonition,{title:"Even more logging",type:"tip",children:(0,t.jsxs)(n.p,{children:["If you're curious to see ",(0,t.jsx)(n.em,{children:"even"})," more then you can enable logging for ",(0,t.jsx)(n.em,{children:"everything"})," (that is, even logs from dependencies) via: ",(0,t.jsx)(n.code,{children:"RUST_LOG=debug cargo run"}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"graphql-playground",children:"GraphQL playground"}),"\n",(0,t.jsxs)(n.p,{children:["How can we actually check that the node is running? When starting ",(0,t.jsx)(n.code,{children:"aquadoggo"})," it will automatically open an HTTP server on port ",(0,t.jsx)(n.code,{children:"2020"})," with an GraphQL API. On top of that it offers a playground for us to already play with the GraphQL API. We can visit it by opening our browser and going to:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"http://localhost:2020/graphql\n"})}),"\n",(0,t.jsx)(n.h3,{id:"send-a-query",children:"Send a query"}),"\n",(0,t.jsxs)(n.p,{children:["Maybe you have never worked with ",(0,t.jsx)(n.a,{href:"https://graphql.org/",children:"GraphQL"})," before but we can just send some queries to the node for fun. You can enter a query in the left area of the playground and click the large ",(0,t.jsx)(n.em,{children:"Play"})," button in the middle. This will send the query to the node and its JSON response will show in the right area."]}),"\n",(0,t.jsxs)(n.p,{children:["Try this following query by entering it in the left textarea and clicking the ",(0,t.jsx)(n.em,{children:"Play"})," button:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:"{\n  all_schema_definition_v1 {\n    documents {\n      fields {\n        name\n        description\n      }\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"It will return the following, relative unspectacular response in the right area:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "all_schema_definition_v1": []\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Still, this is already doing a lot! With this query we asked our ",(0,t.jsx)(n.code,{children:"aquadoggo"})," if it knows any schemas and since we have just started it it doesn't know any yet! This is why the response is empty .. It's soon time to teach the ",(0,t.jsx)(n.code,{children:"aquadoggo"})," some tricks but this is part of the next ",(0,t.jsx)(n.a,{href:"/tutorials/send-to-node",children:"how to create a schema tutorial"}),". For now we get to know the doggo a little bit better."]}),"\n",(0,t.jsx)(n.h3,{id:"documentation",children:"Documentation"}),"\n",(0,t.jsxs)(n.p,{children:["You can see, this is already how we can interact with the node at any time, we can simply just write queries in the playground using our browser! When building a p2panda client you do nothing else: The client sends GraphQL queries to the node and handles the JSON responses! If you're curious now on how to build a client you can check out this ",(0,t.jsx)(n.a,{href:"/tutorials/mushroom-app",children:"how to build a client tutorial"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["There are a couple of more queries you can find when you click on the ",(0,t.jsx)(n.em,{children:"Docs"})," tab in the right sidebar. Next to the ",(0,t.jsx)(n.code,{children:"all_schema_definition_v1"})," query you find others, for example\n",(0,t.jsx)(n.code,{children:"all_schema_field_definition_v1"})," or ",(0,t.jsx)(n.code,{children:"schema_definition_v1"})," etc.... Later you will find more queries here you created yourself by introducing new schemas to the node!"]}),"\n",(0,t.jsx)(n.admonition,{title:"What are all these queries?",type:"note",children:(0,t.jsxs)(n.p,{children:["These queries serve to find out which schemas exist, they will be used by ",(0,t.jsx)(n.a,{href:"https://p2panda.org/specification/APIs/queries",children:"clients"}),' ("Client API"). Surely there will be more queries coming in the future.']})}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Now we learned how to start a node and how to interact with it via GraphQL! Let's see now how we can configure and adjust it to our special needs. This is mainly a collection of ",(0,t.jsx)(n.em,{children:"cool tricks"})," and not a full documentation of ",(0,t.jsx)(n.code,{children:"aquadoggo"}),", also you probably might not need all of this in the beginning, but maybe it comes in handy soon!"]}),"\n",(0,t.jsx)(n.h3,{id:"data-directory",children:"Data directory"}),"\n",(0,t.jsxs)(n.p,{children:["Whenever we start a new node it will create a directory on your computer where it stores the database inside. On Linux this directory is by default under ",(0,t.jsx)(n.code,{children:"~/.local/share/aquadoggo"})," and ",(0,t.jsx)(n.code,{children:"/Users/<username>/Library/Application Support/aquadoggo"})," on MacOS systems."]}),"\n",(0,t.jsxs)(n.p,{children:["We can use the ",(0,t.jsx)(n.code,{children:"--data-dir"})," command line argument to change the path of this folder to something else. For example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cargo run -- --data-dir ~/good-doggo\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This can be useful if you want to temporarily experiment with a fresh, new ",(0,t.jsx)(n.code,{children:"aquadoggo"})," installation without deleting your previous database."]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.mdxAdmonitionTitle,{children:["What are these strange ",(0,t.jsx)(n.code,{children:"--"}),"?"]}),(0,t.jsxs)(n.p,{children:["You might wonder why we have these ",(0,t.jsx)(n.code,{children:"--"})," two dashes right before we set the argument. This is required to tell ",(0,t.jsx)(n.code,{children:"cargo"})," that we're ",(0,t.jsx)(n.em,{children:"not"})," setting an argument for it but for ",(0,t.jsx)(n.code,{children:"aquadoggo"}),". You can try removing them, ",(0,t.jsx)(n.code,{children:"cargo"})," will tell you that it doesn't know what to do with ",(0,t.jsx)(n.code,{children:"--data-dir"}),"."]})]}),"\n",(0,t.jsx)(n.h3,{id:"delete-database",children:"Delete database"}),"\n",(0,t.jsx)(n.p,{children:"Especially during development you might want to delete your database, you can do this by simply removing the data directory:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Remove database on Linux\nrm -rf ~/.local/share/aquadoggo\n\n# Remove database on Mac OS\nrm -rf ~/Library/Application Support/aquadoggo\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Make sure that ",(0,t.jsx)(n.code,{children:"aquadoggo"})," is not running anymore before you delete that folder."]}),"\n",(0,t.jsx)(n.admonition,{title:"Watch out!",type:"caution",children:(0,t.jsxs)(n.p,{children:["This is ",(0,t.jsx)(n.em,{children:"really"})," deleting everything you stored in your node."]})}),"\n",(0,t.jsx)(n.h3,{id:"http-port",children:"HTTP port"}),"\n",(0,t.jsxs)(n.p,{children:["By default ",(0,t.jsx)(n.code,{children:"aquadoggo"})," starts an HTTP server on port ",(0,t.jsx)(n.code,{children:"2020"}),". If you want to change this you can use the ",(0,t.jsx)(n.code,{children:"HTTP_PORT"})," environment variable like that:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# This changes the GraphQL endpoint to http://localhost:4040/graphql\nHTTP_PORT=4040 cargo run\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This is useful if for whatever reason your port ",(0,t.jsx)(n.code,{children:"2020"})," is already occupied or if you want to run ",(0,t.jsx)(n.em,{children:"more than one"})," aquadoggo."]}),"\n",(0,t.jsx)(n.h3,{id:"postgresql-or-sqlite",children:"PostgreSQL or SQLite"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"aquadoggo"})," allows you to use an SQLite ",(0,t.jsx)(n.em,{children:"or"})," PostgreSQL database. SQLite is the default and really amazing as it does not require you to set up an actual database software. This is why it is so easy to just start an ",(0,t.jsx)(n.code,{children:"aquadoggo"}),". It is also very useful for embedding ",(0,t.jsx)(n.code,{children:"aquadoggo"})," for example ",(0,t.jsx)(n.em,{children:"inside"}),' of an application where you don\'t want the users to also take care of the database, all should just work "out of the box".']}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes you want to use PostgreSQL though, maybe because you are planning to host your ",(0,t.jsx)(n.code,{children:"aquadoggo"})," on a server where it will be used by hundreds of users at the same time. For this of course you need a ",(0,t.jsx)(n.a,{href:"https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-18-04",children:"running PostgreSQL database"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Just add the ",(0,t.jsx)(n.code,{children:"DATABASE_URL"})," environment variable in front of the ",(0,t.jsx)(n.code,{children:"cargo run"})," command to set the new URL for the database:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Use an external PostgreSQL database\nDATABASE_URL=postgresql://postgres:postgres@localhost:5432/aquadoggo cargo run\n"})}),"\n",(0,t.jsxs)(n.admonition,{title:"Explore SQLite",type:"tip",children:[(0,t.jsxs)(n.p,{children:["By default ",(0,t.jsx)(n.code,{children:"aquadoggo"})," will always use ",(0,t.jsx)(n.a,{href:"https://www.sqlite.org/index.html",children:"SQLite"}),", if you have an ",(0,t.jsx)(n.code,{children:"sqlite3"})," client installed you can explore the database like that:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Explore the SQLite database (on Linux)\nsqlite3 ~/.local/share/aquadoggo/aquadoggo-node.sqlite3\n"})})]}),"\n",(0,t.jsxs)(n.admonition,{title:"Run SQLite in-memory",type:"tip",children:[(0,t.jsxs)(n.p,{children:["Another cool SQLite feature is that you can just store the database ",(0,t.jsx)(n.em,{children:"in memory"}),", this means that it will be gone after you quit ",(0,t.jsx)(n.code,{children:"aquadoggo"}),". This is also very useful if you really just want to try something out without storing the data somewhere longer."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"DATABASE_URL=sqlite::memory: cargo run\n"})})]}),"\n",(0,t.jsx)(n.admonition,{title:"Migrations",type:"info",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"aquadoggo"})," checks if there are any pending SQL migrations on every start up. If it detects missing migrations it will run it automatically against the given database."]})}),"\n",(0,t.jsx)(n.h3,{id:"supported-schema-ids",children:"Supported Schema IDs"}),"\n",(0,t.jsxs)(n.p,{children:["By default, your ",(0,t.jsx)(n.code,{children:"aquadoggo"})," doesn't restrict the schema it replicates and materializes, it is interested in ",(0,t.jsx)(n.em,{children:"anything"})," it may come in contact with on the network. If you want to restrict this, you can do so by defining a list of ",(0,t.jsx)(n.code,{children:"supported_schema_ids"})," in a ",(0,t.jsx)(n.code,{children:"config.toml"})," file."]}),"\n",(0,t.jsxs)(n.p,{children:["There is an example of how this file looks at ",(0,t.jsx)(n.code,{children:"./aquadoggo_cli/example_config.toml"}),". In order to configure ",(0,t.jsx)(n.code,{children:"supported_schema_ids"}),", first copy this file into the directory where you are running ",(0,t.jsx)(n.code,{children:"aquadoggo"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Copy the example config file\ncp ./aquadoggo_cli/example_config.toml ./config.toml\n"})}),"\n",(0,t.jsx)(n.p,{children:"Then you can add the ids of schema you want your node to support. A configuration which looks like this would support no schema:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:"supported_schema_ids = []\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["A config like this would enable support of two in-built ",(0,t.jsx)(n.code,{children:"p2panda"})," system schema, and one user defined application schema:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'supported_schema_ids = [\n    # Built-in system schema\n    "schema_field_definition_v1",\n    "schema_definition_v1",\n\n    # User published application schema\n    "blog_0020a01f72a5f28f6a559b4942e3525de2bb2413d05897526fe2250e3b57384983a2",\n]\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Restart your node for the new configuration to take effect. Your ",(0,t.jsx)(n.code,{children:"aquadoggo"})," will now only speak with other nodes which support the same schema, and it will only build publish and query endpoints for schema which are listed in the configuration file."]}),"\n",(0,t.jsx)(n.h2,{id:"done",children:"Done!"}),"\n",(0,t.jsxs)(n.p,{children:["Super, you know now how to start an aquadoggo on your computer or server! This is the first step towards running a p2panda application on your computer or building a new one. Check out the ",(0,t.jsx)(n.a,{href:"/tutorials/send-to-node",children:"next tutorial"})," on how to send data to your running node."]}),"\n",(0,t.jsxs)(n.admonition,{title:"Extra: Embed a node",type:"tip",children:[(0,t.jsxs)(n.p,{children:["This is not part of this tutorial but we just want to mention that you can ",(0,t.jsx)(n.em,{children:"also"})," run a node programmatically by embedding it directly in your Rust codebase:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"use aquadoggo::{Configuration, Node};\nlet config = Configuration::default();\nlet node = Node::start(config).await;\n"})}),(0,t.jsxs)(n.p,{children:["This is very similar to using the command line application, just that you can ship your applications now with a node running ",(0,t.jsx)(n.em,{children:"inside"}),"! Users will then automatically start the node whenever they start the application. Together with ",(0,t.jsx)(n.a,{href:"https://tauri.studio",children:"Tauri"})," your applications can even be written in JavaScript and still use ",(0,t.jsx)(n.code,{children:"aquadoggo"})," internally - even when you're not a Rust developer!"]})]})]})}function c(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>s,a:()=>r});var t=o(7294);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);